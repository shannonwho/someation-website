{"ast":null,"code":"import { useSyncExternalStore, useEvent } from \"./react-deps.js\";\n\n/*\n * Transforms `path` into its relative `base` version\n * If base isn't part of the path provided returns absolute path e.g. `~/app`\n */\nvar relativePath = function relativePath() {\n  var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.pathname;\n  return !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || \"/\" : \"~\" + path;\n};\nvar absolutePath = function absolutePath(to) {\n  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return to[0] === \"~\" ? to.slice(1) : base + to;\n};\n\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\nvar eventPopstate = \"popstate\";\nvar eventPushState = \"pushState\";\nvar eventReplaceState = \"replaceState\";\nvar eventHashchange = \"hashchange\";\nexport var events = [eventPopstate, eventPushState, eventReplaceState, eventHashchange];\nvar subscribeToLocationUpdates = function subscribeToLocationUpdates(callback) {\n  for (var _i = 0, _events = events; _i < _events.length; _i++) {\n    var event = _events[_i];\n    addEventListener(event, callback);\n  }\n  return function () {\n    for (var _i2 = 0, _events2 = events; _i2 < _events2.length; _i2++) {\n      var _event = _events2[_i2];\n      removeEventListener(_event, callback);\n    }\n  };\n};\nexport var useLocationProperty = function useLocationProperty(fn, ssrFn) {\n  return useSyncExternalStore(subscribeToLocationUpdates, fn, ssrFn);\n};\nvar currentSearch = function currentSearch() {\n  return location.search;\n};\nexport var useSearch = function useSearch() {\n  return useLocationProperty(currentSearch);\n};\nvar currentPathname = function currentPathname() {\n  return location.pathname;\n};\nexport var usePathname = function usePathname() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    ssrPath = _ref.ssrPath;\n  return useLocationProperty(currentPathname, ssrPath ? function () {\n    return ssrPath;\n  } : currentPathname);\n};\nexport var navigate = function navigate(to) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$replace = _ref2.replace,\n    replace = _ref2$replace === void 0 ? false : _ref2$replace;\n  return history[replace ? eventReplaceState : eventPushState](null, \"\", to);\n};\n\n// the 2nd argument of the `useLocation` return value is a function\n// that allows to perform a navigation.\n//\n// the function reference should stay the same between re-renders, so that\n// it can be passed down as an element prop without any performance concerns.\n// (This is achieved via `useEvent`.)\nvar useLocation = function useLocation() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return [relativePath(opts.base, usePathname(opts)), useEvent(function (to, navOpts) {\n    return navigate(absolutePath(to, opts.base), navOpts);\n  })];\n};\nexport default useLocation;\n\n// While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\nif (typeof history !== \"undefined\") {\n  var _loop = function _loop() {\n    var type = _arr[_i3];\n    var original = history[type];\n    // TODO: we should be using unstable_batchedUpdates to avoid multiple re-renders,\n    // however that will require an additional peer dependency on react-dom.\n    // See: https://github.com/reactwg/react-18/discussions/86#discussioncomment-1567149\n    history[type] = function () {\n      var result = original.apply(this, arguments);\n      var event = new Event(type);\n      event.arguments = arguments;\n      dispatchEvent(event);\n      return result;\n    };\n  };\n  for (var _i3 = 0, _arr = [eventPushState, eventReplaceState]; _i3 < _arr.length; _i3++) {\n    _loop();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}