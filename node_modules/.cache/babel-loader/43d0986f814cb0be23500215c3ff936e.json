{"ast":null,"code":"import * as React from \"react\";\n\n// React.useInsertionEffect is not available in React <18\nvar useEffect = React.useEffect,\n  useLayoutEffect = React.useLayoutEffect,\n  useRef = React.useRef,\n  useBuiltinInsertionEffect = React.useInsertionEffect;\nexport { useState, useContext, createContext, isValidElement, cloneElement, createElement, Fragment, forwardRef } from \"react\";\n\n// To resolve webpack 5 errors, while not presenting problems for native,\n// we copy the approaches from https://github.com/TanStack/query/pull/3561\n// and https://github.com/TanStack/query/pull/3601\n// ~ Show this aging PR some love to remove the need for this hack:\n//   https://github.com/facebook/react/pull/25231 ~\nexport { useSyncExternalStore } from \"./use-sync-external-store.js\";\n\n// Copied from:\n// https://github.com/facebook/react/blob/main/packages/shared/ExecutionEnvironment.js\nvar canUseDOM = !!(typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\n\n// Copied from:\n// https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.ts\n// \"React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\"\nexport var useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;\n\n// useInsertionEffect is already a noop on the server.\n// See: https://github.com/facebook/react/blob/main/packages/react-server/src/ReactFizzHooks.js\nexport var useInsertionEffect = useBuiltinInsertionEffect || useIsomorphicLayoutEffect;\n\n// Userland polyfill while we wait for the forthcoming\n// https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md\n// Note: \"A high-fidelity polyfill for useEvent is not possible because\n// there is no lifecycle or Hook in React that we can use to switch\n// .current at the right timing.\"\n// So we will have to make do with this \"close enough\" approach for now.\nexport var useEvent = function useEvent(fn) {\n  var ref = useRef([fn, function () {\n    return ref[0].apply(ref, arguments);\n  }]).current;\n  // Per Dan Abramov: useInsertionEffect executes marginally closer to the\n  // correct timing for ref synchronization than useLayoutEffect on React 18.\n  // See: https://github.com/facebook/react/pull/25881#issuecomment-1356244360\n  useInsertionEffect(function () {\n    ref[0] = fn;\n  });\n  return ref[1];\n};","map":null,"metadata":{},"sourceType":"module"}