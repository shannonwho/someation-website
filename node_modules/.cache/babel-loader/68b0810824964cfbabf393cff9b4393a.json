{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"style\"];\nimport React from 'react';\nimport { If } from './If';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport * from './If';\nexport default function OnlyWhen(props) {\n  var children = props.children,\n    when = props.when,\n    hiddenMode = props.hiddenMode,\n    className = props.className;\n  var singleChild = React.Children.only(children);\n  var _singleChild$props = singleChild.props,\n    style = _singleChild$props.style,\n    restOfChildProps = _objectWithoutPropertiesLoose(_singleChild$props, _excluded);\n  var extendedProps = _extends({}, restOfChildProps);\n  var keepNode = hiddenMode && hiddenMode !== 'null';\n  if (keepNode) {\n    if (hiddenMode === 'css') {\n      extendedProps.className = ((extendedProps.className || '') + \" \" + (className || '')).trim();\n    } else {\n      extendedProps.style = _extends({}, style, hiddenMode === 'display' && {\n        display: 'none'\n      }, hiddenMode === 'visibility' && {\n        visibility: 'hidden'\n      });\n    }\n  }\n  var cloned = /*#__PURE__*/React.cloneElement(singleChild, extendedProps);\n  var toHide = /*#__PURE__*/_jsx(If, {\n    condition: keepNode,\n    children: cloned\n  });\n  return when ? singleChild : toHide;\n}","map":null,"metadata":{},"sourceType":"module"}